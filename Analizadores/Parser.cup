package com.jbrod.calculadoracompi.analizadores;
import java_cup.runtime.*;


parser code{:

    private String resultado = "";

    // Conectar el parser al escaner
    public Parser(Lexer lex){
        super(lex);
    }

    public String obtenerResultado(){
        return resultado; 
    }

    public void syntax_error(Symbol cur_token) {
        /*System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);*/
        if (expected_token_ids().isEmpty()) {
            //System.out.println("Ya no se esperaba ningun simbolo");
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Ya no se esperaba ningun simbolo." );
        }else{
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Se esperaba otro simbolo." );
        }

    }


    public String doubleString(double num){
        String s = "";
        s += num; 
        return s; 
    }
    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/

:}

/* - - - - - - - - - - - - - - - - - - - - - - - Terminales - - - - - - - - - - - - - - - - - - - - - - - */
/* Numeros */
terminal NUMERO;

/* Operaciones / Simbolos */
terminal MULTIPLICACION, DIVISION, SUMA, RESTA, PARA, PARC, COMA;


/* - - - - - - - - - - - - - - - - - - - - - - No terminales - - - - - - - - - - - - - - - - - - - - - - */
non terminal inicio; 

// Numeros
non terminal num; 


/* - - - - - - - - - - - - - - - - - - - - - - - Producciones - - - - - - - - - - - - - - - - - - - - - - - */

precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;

// Inicio
start with inicio; 
inicio ::= num:number {: resultado = String.valueOf((double)number); :};

// Numeros
num ::= NUMERO:number {: RESULT = (double)number; :};   

num ::= num:n1 SUMA  num:n2 {: RESULT = (double)n1 + (double)n2; 
                               /*reporteOperadores.agregarOcurrencia("SUMA", cur_token.left, cur_token.right, doubleString((double)n1) + " + " + doubleString((double)n2)); */:}; 
num ::= num:n1 RESTA num:n2 {: RESULT = (double)n1 - (double)n2; 
                               /*reporteOperadores.agregarOcurrencia("RESTA", cur_token.left, cur_token.right, doubleString((double)n1) + " - " + doubleString((double)n2));*/:};

num ::= num:n1 MULTIPLICACION num:n2 {: RESULT = (double)n1 * (double)n2; 
                                        /*reporteOperadores.agregarOcurrencia("MULTIPLICACION", cur_token.left, cur_token.right, doubleString((double)n1) + " * " + doubleString((double)n2));*/ :};
num ::= num:n1 DIVISION       num:n2 {: RESULT = (double)n1 / (double)n2; 
                                        /*reporteOperadores.agregarOcurrencia("DIVISION", cur_token.left, cur_token.right, doubleString((double)n1) + " / " + doubleString((double)n2));*/ :}; 

num ::= PARA num:number PARC {: RESULT = (double)number; 
                                        /*reporteOperadores.agregarOcurrencia("PARENTESIS", cur_token.left, cur_token.right, "(" + doubleString((double)number) + " ) " );*/ :};
